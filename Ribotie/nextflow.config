// ===============================================================================
// CONFIGURATION PROFILE FOR BELUGA HPC CLUSTER
// ===============================================================================
// This configuration is specific to the Compute Canada (Alliance) HPC system.
// It defines the necessary parameters to run Nextflow on Beluga.
// ===============================================================================

params.config_profile_description = 'Alliance Beluga HPC config'  // Profile description
params.config_profile_contact = 'https://docs.alliancecan.ca/wiki/Technical_support'  // Technical support link
params.config_profile_url = 'docs.alliancecan.ca/wiki/Nextflow'  // Nextflow documentation for Alliance
conda.enabled = true  // Enable conda for package management


// ===============================================================================
// GLOBAL PROCESS CONFIGURATION
// ===============================================================================

process {
    executor = 'slurm'
    queue = 'noxatras'  // Replace with your actual account/partition
    maxRetries = 3
    errorStrategy = { task.exitStatus in [125,139] ? 'retry' : 'finish' }

    // Default resources
    cpus = 1
    memory = '4.GB'
    time = '1h'
    

    withName: 'RUN_RIBOTIE_DATA' {
        cpus = 8
        memory = { 
            def base = 60.GB
            def bam_size = task.attempt > 1 ? 
                (file("*Aligned.toTranscriptome.out.bam").size() / (1024**3) * 1.5).GB : 20.GB
            return Math.min(120.GB, base + bam_size) * task.attempt
        }
        time = '24h'
        clusterOptions = '--account=def-xroucou'
    }
    
    withName: 'RUN_RIBOTIE' {
        cpus = 8
        memory = '80.GB'
        time = '24h'
        clusterOptions = '--account=def-xroucou --gpus=a100_3g.20gb:1'
    }
}

executor {
    name = 'slurm'
    pollInterval = '60 sec'
    submitRateLimit = '60/1min'
    queueSize = 100
}

// Resource limits
params {
    max_memory = 120.GB
    max_cpus = 40
    max_time = 168.h
}

// ===============================================================================
// PATHS USED IN THE PIPELINE
// ===============================================================================
// Paths to RNA FASTA files to filter (snRNA, snoRNA, rRNA) by species
// Paths to complete genomes and annotations for STAR alignmen
// false = species is not configured/supported
// ===============================================================================

// pipline directory
params.path_pipeline_directory = '/project/def-xroucou/ribotie'  // Path to the pipeline directory
params.reference_files_directory = "${params.path_pipeline_directory}/reference"  // Directory for reference files
  // Path to MultiQC configuration file
// rRNA FASTA files for Bowtie - filtering non-coding and ribosomal RNAs


params.annotation_GTF= [
    'HS': "${params.reference_files_directory}/HS/HS_GTF.gtf",
    'CE': "${params.reference_files_directory}/CE/CE_GTF.gtf",
    'DM': "${params.reference_files_directory}/DM/DM_GTF.gtf",
    'SC': "${params.reference_files_directory}/SC/SC_GTF.gtf",
    'DR': "${params.reference_files_directory}/DR/DR_GTF.gtf",
    'SM': "${params.reference_files_directory}/SM/SM_GTF.gtf"
]

params.dna_assembly = [
    'HS': "${params.reference_files_directory}/HS/HS_GTF.gtf",
    'CE': "${params.reference_files_directory}/CE/CE_GTF.gtf",
    'DM': "${params.reference_files_directory}/DM/DM_GTF.gtf",
    'SC': "${params.reference_files_directory}/SC/SC_GTF.gtf",
    'DR': "${params.reference_files_directory}/DR/DR_GTF.gtf",
    'SM': "${params.reference_files_directory}/SM/SM_GTF.gtf"
]

// Parameter for multiqc 
params.input_csv = "${params.path_pipeline_directory}/all_human.csv"  // Input CSV file for the pipeline
params.trimmed_fastq_dir = "${params.path_pipeline_directory}/trimmed"