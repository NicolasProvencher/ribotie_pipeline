// ===============================================================================
// CONFIGURATION PROFILE FOR BELUGA HPC CLUSTER
// ===============================================================================
// This configuration is specific to the Compute Canada (Alliance) HPC system.
// It defines the necessary parameters to run Nextflow on Beluga.
// ===============================================================================

params.config_profile_description = 'Alliance Beluga HPC config'  // Profile description
params.config_profile_contact = 'https://docs.alliancecan.ca/wiki/Technical_support'  // Technical support link
params.config_profile_url = 'docs.alliancecan.ca/wiki/Nextflow'  // Nextflow documentation for Alliance

// ===============================================================================
// GLOBAL PROCESS CONFIGURATION
// ===============================================================================
// Defines default parameters for all pipeline processes
// ===============================================================================

process {
  executor = 'slurm' 
  clusterOptions = '--account=rrg-xroucou'
  maxRetries = 3
  errorStrategy = { task.exitStatus in [125,137,139] ? 'retry' : 'finish' }
  memory = { check_max( 80.GB * task.attempt, 'memory' ) }  // Direct multiplication by task.attempt
  cpu = 5  
  time = '24h' 
}


// ===============================================================================
// EXECUTOR CONFIGURATION
// ===============================================================================
// Controls how Nextflow interacts with the task manager (SLURM)
// ===============================================================================

executor {
  pollInterval = '60 sec'
  submitRateLimit = '60/1min'
  queueSize = 100 
}

// ===============================================================================
// EXECUTION PROFILES
// ===============================================================================
// Defines preset configurations that can be activated with -profile
// ===============================================================================

profiles {
  beluga {  // Specific profile for jobs requiring more resources on Beluga
    max_memory='186G'  // Maximum memory per job in this profile
    max_cpu= 60  // Maximum CPUs per job
    max_time='168h'  // Maximum execution time (1 week)
  }
}


// ===============================================================================
// REFERENCE FILE PATHS FOR BOWTIE
// ===============================================================================
// Paths to RNA FASTA files to filter (snRNA, snoRNA, rRNA) by species
// These files are used in initial filtering with Bowtie
// false = species is not configured/supported
// ===============================================================================

// pipline directory
params.path_pipeline_directory = '/path/to/pipeline/directory'  // Path to the pipeline directory


// rRNA FASTA files for Bowtie - filtering non-coding and ribosomal RNAs
params.path_rrna_HS = "${params.path_pipeline_directory}/fasta_files/snRNA_snoRNA_rRNA_HS_ensembl113.fasta"  // Homo sapiens (human)
params.path_rrna_CE = false  // Caenorhabditis elegans (worm)
params.path_rrna_DM = false  // Drosophila melanogaster (fly)
params.path_rrna_SC = false  // Saccharomyces cerevisiae (yeast)
params.path_rrna_DR = false  // Danio rerio (zebrafish)


// ===============================================================================
// REFERENCE FILE PATHS FOR STAR
// ===============================================================================
// Paths to complete genomes (FASTA) and annotations (GTF) by species
// These files are used for final alignment with STAR
// ===============================================================================

// Reference files for STAR - alignment to the complete genome
// Format: genome FASTA + GTF annotation for each species
params.path_fasta_HS = "${params.path_pipeline_directory}/fasta_files/complete_genome_HS.fa"  // Human genome
params.path_GTF_HS = "${params.path_pipeline_directory}/fasta_files/Homo_sapiens.GRCh38.113.gtf"  // Human annotation

// References for other species - not configured in this setup
params.path_fasta_CE = false  // C. elegans genome
params.path_GTF_CE = false  // C. elegans annotation

params.path_fasta_DM = false  // D. melanogaster genome
params.path_GTF_DM = false  // D. melanogaster annotation

params.path_fasta_SC = false  // S. cerevisiae genome
params.path_GTF_SC = false  // S. cerevisiae annotation

params.path_fasta_DR = false  // D. rerio genome
params.path_GTF_DR = false  // D. rerio annotation





// ===============================================================================
// FIRST STAGE PARAMETERS
// ===============================================================================
// The first stage downloads SRA data, performs quality control
// and read trimming.
// ===============================================================================

// Output folder for the first stage
// Contains downloaded data, FastQC reports, and trimmed reads
params.outdir_first_stage = "${params.path_pipeline_directory}/output_complet"

// Input CSV file containing metadata of samples to analyze
// Expected format: 
// Name,Species,Study_accession,Project_link,PMID,Treatment_type,Drug,Sample_accession,Biological_type,Ribo_type,Trim_arg,S_P_type
// params.input_csv = '/path/to/pipeline/directory/Samples_sheet/Sample_sheet_nic.csv'

//
// Multiqc step 
// Parameter for multiqc 
params.multiqc_config = "${params.path_pipeline_directory}/riboseq_nextflow_pipeline/config_multiqc.yaml"


// ===============================================================================
// SECOND STAGE PARAMETERS
// ===============================================================================
// The second stage uses processed files from the first stage to:
// 1. Filter ribosomal RNA with Bowtie
// 2. Align remaining reads to the genome with STAR
// ===============================================================================

// Path to the output folder of the first stage (input for the second stage)
// Contains trimmed FASTQ files to be used for alignment
params.input_output_fastq_second_stage = "${params.path_pipeline_directory}/output_complet_original"

/// params.input_output_fastq_second_stage = '/path/to/pipeline/directory/output_complet_HS'

// Input CSV file (same as for the first stage)
//params.input_csv = '/path/to/pipeline/directory/Samples_sheet/test.csv'

// Output folder for the second stage
// Will contain alignment files (BAM) and other results
params.outdir_stage_stage = '/path/to/pipeline/directory/Second_Stage_nic'

// Parent folder for indexes and other common files
// Used to store Bowtie and STAR indexes that can be reused
params.outdir_stage_stage_parent = '/path/to/pipeline/directory/fasta_files/'

// ===============================================================================
// RIBOTIE PARAMETERS
// ===============================================================================
// Parameters needed for RiboTIE-related processes
// ===============================================================================

// Output folder for RiboTIE results
//params.outdir_ribotie = '/path/to/pipeline/directory/ribotie_output_test_complet'

// Path to the RiboTIE directory
params.ribotie_dir = '/path/to/pipeline/directory/ribotie'

// Maximum number of retries for RiboTIE processes
params.max_retries_ribotie = 2


// ===============================================================================
// THIRD STAGE PARAMETERS
// ===============================================================================
// Parameters needed for ribotie and third stage processes
// ===============================================================================

params.star_dir = '/path/to/pipeline/directory/Second_Stage_copy/HS/STAR'
params.input_csv = '/path/to/pipeline/directory/Samples_sheet/test.csv' // this file does nothing, it doesn't matter because this stage is based on paths found in HS/STAR
params.outdir_ribotie = '/path/to/pipeline/directory/Ribotie_complet'  
params.ribotie_dir = '/path/to/pipeline/directory/ribotie'

